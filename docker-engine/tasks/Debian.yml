---
- name: Install docker dependencies
  apt: name={{ item }} state=present
  with_items:
    - linux-image-extra-virtual
  register: new_kernel

- name: remove unused packages
  apt: autoremove=yes
  when: new_kernel|changed

# GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0
- name: Enable CONFIG_MEMCG_SWAP_ENABLED
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"'
    #backup: yes
    state: present
  register: grub_config

#- debug: var=grub_config
#- assert: { that: False }

- name: Update grub
  command: /usr/sbin/update-grub
  when: grub_config|changed

- slack: token={{ secrets.slack.token }} color="warning" msg="Linux kernel on server \"*{{ inventory_hostname }}*\" is changed. Rebooting"
  become: no
  delegate_to: localhost
  when: not slack_mute and (grub_config|changed or new_kernel|changed)

- name: Restart server
  shell: sleep 2 && /sbin/shutdown -r now "Kernel config updated"
  async: 1
  poll: 0
  ignore_errors: True
  failed_when: False
  register: reboot
  when: grub_config|changed or new_kernel|changed

- name: Wait for server
  local_action: wait_for host={{ ansible_ssh_host }} port=22 delay=30 timeout=300 state=started connect_timeout=300
  become: false
  when: reboot|changed

- slack: token={{ secrets.slack.token }} color="good" msg="Server \"*{{ inventory_hostname }}*\" is returned from reboot. Online."
  become: no
  delegate_to: localhost
  when: not slack_mute and (grub_config|changed or new_kernel|changed)

- name: Remove old docker packages
  apt: name={{ item }} state=absent
  with_items:
    - docker
    - docker-engine
    - docker.io

- name: Add docker repository key
  apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    state: present

- name: Add docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
    state: present

- name: Update apt cache
  apt: update_cache=yes
  changed_when: False

- name: Install docker comunity edition
  apt: name={{ item }} state=present
  with_items:
    - docker-ce
    - docker-compose

- name: Ensure that docker service is started
  service: name=docker state=started enabled=yes

- name: Add the Docker administrators to the Docker group
  user: name={{ item }} groups=docker append=true
  with_items: "{{ docker_admin_users }}"
#  notify: refresh_groups
